syntax = "proto3";
package eventos;

message Evento {
  int32 id = 1;
  string nombre = 2;
  string descripcion = 3;
  string fecha_evento_iso = 4;
  repeated int32 miembros_ids = 5;
}

message DonacionUsada {
  int32 inventario_id = 1;
  int32 cantidad_usada = 2;
}

message CrearEventoRequest {
  string nombre = 1;
  string descripcion = 2;
  string fecha_evento_iso = 3;       // debe ser futuro
  repeated int32 miembros_ids = 4;  
  int32 actor_usuario_id = 5;        // para auditoría/autorización
  string actor_rol = 6;              // "Presidente" | "Coordinador" | "Voluntario"
}

message CrearEventoResponse {
  Evento evento = 1;
  string mensaje = 2;
}

message ModificarEventoRequest {
  int32 id = 1;
  string nombre = 2;
  string fecha_evento_iso = 3;         
  repeated int32 agregar_miembros_ids = 4;
  repeated int32 quitar_miembros_ids = 5;
  // si el evento ya pasó, se permite registrar donaciones usadas:
  repeated DonacionUsada donaciones_usadas = 6;
  int32 actor_usuario_id = 7;
  string actor_rol = 8;
}

message ModificarEventoResponse {
  Evento evento = 1;   // campos actuales
  string mensaje = 2;
}

message BajaEventoRequest {
  int32 id = 1;
  int32 actor_usuario_id = 2;
  string actor_rol = 3;
}

message BajaEventoResponse {
  string mensaje = 1;
}

message AsignarQuitarRequest {
  int32 evento_id = 1;
  int32 usuario_id = 2;       // a asignar/quitar
  int32 actor_usuario_id = 3; // quien ejecuta
  string actor_rol = 4;
  bool agregar = 5;           // true: asignar, false: quitar
}

message AsignarQuitarResponse {
  string mensaje = 1;
}

service EventoService {
  rpc CrearEvento (CrearEventoRequest) returns (CrearEventoResponse);
  rpc ModificarEvento (ModificarEventoRequest) returns (ModificarEventoResponse);
  rpc BajaEvento (BajaEventoRequest) returns (BajaEventoResponse);
  rpc AsignarOQuitarMiembro (AsignarQuitarRequest) returns (AsignarQuitarResponse);
}
